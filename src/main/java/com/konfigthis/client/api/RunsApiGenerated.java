/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RunInfo;
import com.konfigthis.client.model.RunResultsResponse;
import com.konfigthis.client.model.RunStatus;
import com.konfigthis.client.model.RunType;
import com.konfigthis.client.model.RunsOrderBy;
import com.konfigthis.client.model.RunsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RunsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RunsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RunsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getRunDetailsCall(Integer runID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runs/{runID}"
            .replace("{" + "runID" + "}", localVarApiClient.escapeString(runID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRunDetailsValidateBeforeCall(Integer runID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runID' is set
        if (runID == null) {
            throw new ApiException("Missing the required parameter 'runID' when calling getRunDetails(Async)");
        }

        return getRunDetailsCall(runID, _callback);

    }


    private ApiResponse<RunInfo> getRunDetailsWithHttpInfo(Integer runID) throws ApiException {
        okhttp3.Call localVarCall = getRunDetailsValidateBeforeCall(runID, null);
        Type localVarReturnType = new TypeToken<RunInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRunDetailsAsync(Integer runID, final ApiCallback<RunInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRunDetailsValidateBeforeCall(runID, _callback);
        Type localVarReturnType = new TypeToken<RunInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRunDetailsRequestBuilder {
        private final Integer runID;

        private GetRunDetailsRequestBuilder(Integer runID) {
            this.runID = runID;
        }

        /**
         * Build call for getRunDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRunDetailsCall(runID, _callback);
        }


        /**
         * Execute getRunDetails request
         * @return RunInfo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public RunInfo execute() throws ApiException {
            ApiResponse<RunInfo> localVarResp = getRunDetailsWithHttpInfo(runID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRunDetails request with HTTP info returned
         * @return ApiResponse&lt;RunInfo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RunInfo> executeWithHttpInfo() throws ApiException {
            return getRunDetailsWithHttpInfo(runID);
        }

        /**
         * Execute getRunDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RunInfo> _callback) throws ApiException {
            return getRunDetailsAsync(runID, _callback);
        }
    }

    /**
     * Get Run
     * Gets a single run.
     * @param runID The run ID. (required)
     * @return GetRunDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single run. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public GetRunDetailsRequestBuilder getRunDetails(Integer runID) throws IllegalArgumentException {
        if (runID == null) throw new IllegalArgumentException("\"runID\" is required but got null");
        return new GetRunDetailsRequestBuilder(runID);
    }
    private okhttp3.Call listInformationCall(Integer limit, Object startingFrom, RunsOrderBy orderBy, String orderByDirection, RunType runType, RunStatus runStatus, String environmentID, Boolean detail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startingFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startingFrom", startingFrom));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (orderByDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderByDirection", orderByDirection));
        }

        if (runType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runType", runType));
        }

        if (runStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runStatus", runStatus));
        }

        if (environmentID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environmentID", environmentID));
        }

        if (detail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detail", detail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInformationValidateBeforeCall(Integer limit, Object startingFrom, RunsOrderBy orderBy, String orderByDirection, RunType runType, RunStatus runStatus, String environmentID, Boolean detail, final ApiCallback _callback) throws ApiException {
        return listInformationCall(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail, _callback);

    }


    private ApiResponse<RunsResponse> listInformationWithHttpInfo(Integer limit, Object startingFrom, RunsOrderBy orderBy, String orderByDirection, RunType runType, RunStatus runStatus, String environmentID, Boolean detail) throws ApiException {
        okhttp3.Call localVarCall = listInformationValidateBeforeCall(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail, null);
        Type localVarReturnType = new TypeToken<RunsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInformationAsync(Integer limit, Object startingFrom, RunsOrderBy orderBy, String orderByDirection, RunType runType, RunStatus runStatus, String environmentID, Boolean detail, final ApiCallback<RunsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInformationValidateBeforeCall(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail, _callback);
        Type localVarReturnType = new TypeToken<RunsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInformationRequestBuilder {
        private Integer limit;
        private Object startingFrom;
        private RunsOrderBy orderBy;
        private String orderByDirection;
        private RunType runType;
        private RunStatus runStatus;
        private String environmentID;
        private Boolean detail;

        private ListInformationRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of runs to return. (optional, default to 25)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set startingFrom
         * @param startingFrom The starting run ID, runStartTime, or runEndTime (exclusive) for paging the query results. (optional)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder startingFrom(Object startingFrom) {
            this.startingFrom = startingFrom;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy The field used to order results. (optional, default to id)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder orderBy(RunsOrderBy orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set orderByDirection
         * @param orderByDirection The sort order for query results. (optional, default to desc)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder orderByDirection(String orderByDirection) {
            this.orderByDirection = orderByDirection;
            return this;
        }
        
        /**
         * Set runType
         * @param runType A run type to filter the query results. (optional)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder runType(RunType runType) {
            this.runType = runType;
            return this;
        }
        
        /**
         * Set runStatus
         * @param runStatus A status value to filter the query results. (optional)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder runStatus(RunStatus runStatus) {
            this.runStatus = runStatus;
            return this;
        }
        
        /**
         * Set environmentID
         * @param environmentID An environment ID to filter the query results. (optional)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder environmentID(String environmentID) {
            this.environmentID = environmentID;
            return this;
        }
        
        /**
         * Set detail
         * @param detail Include the full detail of the run. (optional, default to false)
         * @return ListInformationRequestBuilder
         */
        public ListInformationRequestBuilder detail(Boolean detail) {
            this.detail = detail;
            return this;
        }
        
        /**
         * Build call for listInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of runs. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInformationCall(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail, _callback);
        }


        /**
         * Execute listInformation request
         * @return RunsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of runs. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public RunsResponse execute() throws ApiException {
            ApiResponse<RunsResponse> localVarResp = listInformationWithHttpInfo(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInformation request with HTTP info returned
         * @return ApiResponse&lt;RunsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of runs. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RunsResponse> executeWithHttpInfo() throws ApiException {
            return listInformationWithHttpInfo(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail);
        }

        /**
         * Execute listInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of runs. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RunsResponse> _callback) throws ApiException {
            return listInformationAsync(limit, startingFrom, orderBy, orderByDirection, runType, runStatus, environmentID, detail, _callback);
        }
    }

    /**
     * List Runs
     * Get a collection of information about runs.
     * @return ListInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of runs. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public ListInformationRequestBuilder listInformation() throws IllegalArgumentException {
        return new ListInformationRequestBuilder();
    }
    private okhttp3.Call listResultsCall(Integer runID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runs/{runID}/results"
            .replace("{" + "runID" + "}", localVarApiClient.escapeString(runID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResultsValidateBeforeCall(Integer runID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runID' is set
        if (runID == null) {
            throw new ApiException("Missing the required parameter 'runID' when calling listResults(Async)");
        }

        return listResultsCall(runID, _callback);

    }


    private ApiResponse<RunResultsResponse> listResultsWithHttpInfo(Integer runID) throws ApiException {
        okhttp3.Call localVarCall = listResultsValidateBeforeCall(runID, null);
        Type localVarReturnType = new TypeToken<RunResultsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listResultsAsync(Integer runID, final ApiCallback<RunResultsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResultsValidateBeforeCall(runID, _callback);
        Type localVarReturnType = new TypeToken<RunResultsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListResultsRequestBuilder {
        private final Integer runID;

        private ListResultsRequestBuilder(Integer runID) {
            this.runID = runID;
        }

        /**
         * Build call for listResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of results for a deploy or refresh run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listResultsCall(runID, _callback);
        }


        /**
         * Execute listResults request
         * @return RunResultsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of results for a deploy or refresh run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public RunResultsResponse execute() throws ApiException {
            ApiResponse<RunResultsResponse> localVarResp = listResultsWithHttpInfo(runID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listResults request with HTTP info returned
         * @return ApiResponse&lt;RunResultsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of results for a deploy or refresh run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RunResultsResponse> executeWithHttpInfo() throws ApiException {
            return listResultsWithHttpInfo(runID);
        }

        /**
         * Execute listResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A collection of results for a deploy or refresh run. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RunResultsResponse> _callback) throws ApiException {
            return listResultsAsync(runID, _callback);
        }
    }

    /**
     * List Run Results
     * Get a collection of the results of a deploy or refresh run
     * @param runID The run ID. (required)
     * @return ListResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of results for a deploy or refresh run. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User lacks authorization to perform this action. </td><td>  -  </td></tr>
     </table>
     */
    public ListResultsRequestBuilder listResults(Integer runID) throws IllegalArgumentException {
        if (runID == null) throw new IllegalArgumentException("\"runID\" is required but got null");
        return new ListResultsRequestBuilder(runID);
    }
}
