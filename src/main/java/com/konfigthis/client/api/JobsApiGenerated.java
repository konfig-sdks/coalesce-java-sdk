/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.JobsCancelJobRunRequest;
import com.konfigthis.client.model.JobsGetStatusUpdatesResponse;
import com.konfigthis.client.model.JobsInitiateRunRequest;
import com.konfigthis.client.model.JobsInitiateRunRequestRunDetails;
import com.konfigthis.client.model.JobsInitiateRunRequestUserCredentials;
import com.konfigthis.client.model.JobsInitiateRunResponse;
import com.konfigthis.client.model.JobsTriggerRerunRequest;
import com.konfigthis.client.model.JobsTriggerRerunRequestRunDetails;
import com.konfigthis.client.model.JobsTriggerRerunRequestUserCredentials;
import com.konfigthis.client.model.JobsTriggerRerunResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelJobRunCall(JobsCancelJobRunRequest jobsCancelJobRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsCancelJobRunRequest;

        // create path and map variables
        String localVarPath = "/scheduler/cancelRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelJobRunValidateBeforeCall(JobsCancelJobRunRequest jobsCancelJobRunRequest, final ApiCallback _callback) throws ApiException {
        return cancelJobRunCall(jobsCancelJobRunRequest, _callback);

    }


    private ApiResponse<String> cancelJobRunWithHttpInfo(JobsCancelJobRunRequest jobsCancelJobRunRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelJobRunValidateBeforeCall(jobsCancelJobRunRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelJobRunAsync(JobsCancelJobRunRequest jobsCancelJobRunRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelJobRunValidateBeforeCall(jobsCancelJobRunRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelJobRunRequestBuilder {
        private final Integer runID;
        private String orgID;
        private String environmentID;

        private CancelJobRunRequestBuilder(Integer runID) {
            this.runID = runID;
        }

        /**
         * Set orgID
         * @param orgID The organization&#39;s ID of the run the user would like to cancel. (optional)
         * @return CancelJobRunRequestBuilder
         */
        public CancelJobRunRequestBuilder orgID(String orgID) {
            this.orgID = orgID;
            return this;
        }
        
        /**
         * Set environmentID
         * @param environmentID The environment ID of the run the user would like to cancel. (optional)
         * @return CancelJobRunRequestBuilder
         */
        public CancelJobRunRequestBuilder environmentID(String environmentID) {
            this.environmentID = environmentID;
            return this;
        }
        
        /**
         * Build call for cancelJobRun
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsCancelJobRunRequest jobsCancelJobRunRequest = buildBodyParams();
            return cancelJobRunCall(jobsCancelJobRunRequest, _callback);
        }

        private JobsCancelJobRunRequest buildBodyParams() {
            JobsCancelJobRunRequest jobsCancelJobRunRequest = new JobsCancelJobRunRequest();
            jobsCancelJobRunRequest.runID(this.runID);
            jobsCancelJobRunRequest.orgID(this.orgID);
            jobsCancelJobRunRequest.environmentID(this.environmentID);
            return jobsCancelJobRunRequest;
        }

        /**
         * Execute cancelJobRun request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            JobsCancelJobRunRequest jobsCancelJobRunRequest = buildBodyParams();
            ApiResponse<String> localVarResp = cancelJobRunWithHttpInfo(jobsCancelJobRunRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelJobRun request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            JobsCancelJobRunRequest jobsCancelJobRunRequest = buildBodyParams();
            return cancelJobRunWithHttpInfo(jobsCancelJobRunRequest);
        }

        /**
         * Execute cancelJobRun request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            JobsCancelJobRunRequest jobsCancelJobRunRequest = buildBodyParams();
            return cancelJobRunAsync(jobsCancelJobRunRequest, _callback);
        }
    }

    /**
     * Cancel Running Job
     * Querying this endpoint will cancel a currently running job.
     * @return CancelJobRunRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 </td><td>  -  </td></tr>
     </table>
     */
    public CancelJobRunRequestBuilder cancelJobRun(Integer runID) throws IllegalArgumentException {
        if (runID == null) throw new IllegalArgumentException("\"runID\" is required but got null");
        return new CancelJobRunRequestBuilder(runID);
    }
    private okhttp3.Call getStatusUpdatesCall(Integer runCounter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduler/runStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runCounter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runCounter", runCounter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusUpdatesValidateBeforeCall(Integer runCounter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runCounter' is set
        if (runCounter == null) {
            throw new ApiException("Missing the required parameter 'runCounter' when calling getStatusUpdates(Async)");
        }

        return getStatusUpdatesCall(runCounter, _callback);

    }


    private ApiResponse<JobsGetStatusUpdatesResponse> getStatusUpdatesWithHttpInfo(Integer runCounter) throws ApiException {
        okhttp3.Call localVarCall = getStatusUpdatesValidateBeforeCall(runCounter, null);
        Type localVarReturnType = new TypeToken<JobsGetStatusUpdatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusUpdatesAsync(Integer runCounter, final ApiCallback<JobsGetStatusUpdatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusUpdatesValidateBeforeCall(runCounter, _callback);
        Type localVarReturnType = new TypeToken<JobsGetStatusUpdatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusUpdatesRequestBuilder {
        private final Integer runCounter;

        private GetStatusUpdatesRequestBuilder(Integer runCounter) {
            this.runCounter = runCounter;
        }

        /**
         * Build call for getStatusUpdates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusUpdatesCall(runCounter, _callback);
        }


        /**
         * Execute getStatusUpdates request
         * @return JobsGetStatusUpdatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public JobsGetStatusUpdatesResponse execute() throws ApiException {
            ApiResponse<JobsGetStatusUpdatesResponse> localVarResp = getStatusUpdatesWithHttpInfo(runCounter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatusUpdates request with HTTP info returned
         * @return ApiResponse&lt;JobsGetStatusUpdatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsGetStatusUpdatesResponse> executeWithHttpInfo() throws ApiException {
            return getStatusUpdatesWithHttpInfo(runCounter);
        }

        /**
         * Execute getStatusUpdates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsGetStatusUpdatesResponse> _callback) throws ApiException {
            return getStatusUpdatesAsync(runCounter, _callback);
        }
    }

    /**
     * Get Job Status
     * Querying this endpoint will allow you to receive updates on the current status of a specific run.
     * @param runCounter ID of the run to query (required)
     * @return GetStatusUpdatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusUpdatesRequestBuilder getStatusUpdates(Integer runCounter) throws IllegalArgumentException {
        if (runCounter == null) throw new IllegalArgumentException("\"runCounter\" is required but got null");
        return new GetStatusUpdatesRequestBuilder(runCounter);
    }
    private okhttp3.Call initiateRunCall(JobsInitiateRunRequest jobsInitiateRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsInitiateRunRequest;

        // create path and map variables
        String localVarPath = "/scheduler/startRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateRunValidateBeforeCall(JobsInitiateRunRequest jobsInitiateRunRequest, final ApiCallback _callback) throws ApiException {
        return initiateRunCall(jobsInitiateRunRequest, _callback);

    }


    private ApiResponse<JobsInitiateRunResponse> initiateRunWithHttpInfo(JobsInitiateRunRequest jobsInitiateRunRequest) throws ApiException {
        okhttp3.Call localVarCall = initiateRunValidateBeforeCall(jobsInitiateRunRequest, null);
        Type localVarReturnType = new TypeToken<JobsInitiateRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiateRunAsync(JobsInitiateRunRequest jobsInitiateRunRequest, final ApiCallback<JobsInitiateRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateRunValidateBeforeCall(jobsInitiateRunRequest, _callback);
        Type localVarReturnType = new TypeToken<JobsInitiateRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiateRunRequestBuilder {
        private final JobsInitiateRunRequestRunDetails runDetails;
        private String parameters;
        private JobsInitiateRunRequestUserCredentials userCredentials;

        private InitiateRunRequestBuilder(JobsInitiateRunRequestRunDetails runDetails) {
            this.runDetails = runDetails;
        }

        /**
         * Set parameters
         * @param parameters Contains parameters to be used in the Refresh (optional)
         * @return InitiateRunRequestBuilder
         */
        public InitiateRunRequestBuilder parameters(String parameters) {
            this.parameters = parameters;
            return this;
        }
        
        /**
         * Set userCredentials
         * @param userCredentials  (optional)
         * @return InitiateRunRequestBuilder
         */
        public InitiateRunRequestBuilder userCredentials(JobsInitiateRunRequestUserCredentials userCredentials) {
            this.userCredentials = userCredentials;
            return this;
        }
        
        /**
         * Build call for initiateRun
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsInitiateRunRequest jobsInitiateRunRequest = buildBodyParams();
            return initiateRunCall(jobsInitiateRunRequest, _callback);
        }

        private JobsInitiateRunRequest buildBodyParams() {
            JobsInitiateRunRequest jobsInitiateRunRequest = new JobsInitiateRunRequest();
            jobsInitiateRunRequest.parameters(this.parameters);
            jobsInitiateRunRequest.runDetails(this.runDetails);
            jobsInitiateRunRequest.userCredentials(this.userCredentials);
            return jobsInitiateRunRequest;
        }

        /**
         * Execute initiateRun request
         * @return JobsInitiateRunResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public JobsInitiateRunResponse execute() throws ApiException {
            JobsInitiateRunRequest jobsInitiateRunRequest = buildBodyParams();
            ApiResponse<JobsInitiateRunResponse> localVarResp = initiateRunWithHttpInfo(jobsInitiateRunRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiateRun request with HTTP info returned
         * @return ApiResponse&lt;JobsInitiateRunResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsInitiateRunResponse> executeWithHttpInfo() throws ApiException {
            JobsInitiateRunRequest jobsInitiateRunRequest = buildBodyParams();
            return initiateRunWithHttpInfo(jobsInitiateRunRequest);
        }

        /**
         * Execute initiateRun request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsInitiateRunResponse> _callback) throws ApiException {
            JobsInitiateRunRequest jobsInitiateRunRequest = buildBodyParams();
            return initiateRunAsync(jobsInitiateRunRequest, _callback);
        }
    }

    /**
     * Trigger Job to Run
     * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
     * @return InitiateRunRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public InitiateRunRequestBuilder initiateRun(JobsInitiateRunRequestRunDetails runDetails) throws IllegalArgumentException {
        if (runDetails == null) throw new IllegalArgumentException("\"runDetails\" is required but got null");
        return new InitiateRunRequestBuilder(runDetails);
    }
    private okhttp3.Call triggerRerunCall(JobsTriggerRerunRequest jobsTriggerRerunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsTriggerRerunRequest;

        // create path and map variables
        String localVarPath = "/scheduler/rerun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerRerunValidateBeforeCall(JobsTriggerRerunRequest jobsTriggerRerunRequest, final ApiCallback _callback) throws ApiException {
        return triggerRerunCall(jobsTriggerRerunRequest, _callback);

    }


    private ApiResponse<JobsTriggerRerunResponse> triggerRerunWithHttpInfo(JobsTriggerRerunRequest jobsTriggerRerunRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerRerunValidateBeforeCall(jobsTriggerRerunRequest, null);
        Type localVarReturnType = new TypeToken<JobsTriggerRerunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerRerunAsync(JobsTriggerRerunRequest jobsTriggerRerunRequest, final ApiCallback<JobsTriggerRerunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerRerunValidateBeforeCall(jobsTriggerRerunRequest, _callback);
        Type localVarReturnType = new TypeToken<JobsTriggerRerunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerRerunRequestBuilder {
        private final JobsTriggerRerunRequestRunDetails runDetails;
        private final JobsTriggerRerunRequestUserCredentials userCredentials;
        private String parameters;

        private TriggerRerunRequestBuilder(JobsTriggerRerunRequestRunDetails runDetails, JobsTriggerRerunRequestUserCredentials userCredentials) {
            this.runDetails = runDetails;
            this.userCredentials = userCredentials;
        }

        /**
         * Set parameters
         * @param parameters Contains parameters to be used in the Refresh (optional)
         * @return TriggerRerunRequestBuilder
         */
        public TriggerRerunRequestBuilder parameters(String parameters) {
            this.parameters = parameters;
            return this;
        }
        
        /**
         * Build call for triggerRerun
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            JobsTriggerRerunRequest jobsTriggerRerunRequest = buildBodyParams();
            return triggerRerunCall(jobsTriggerRerunRequest, _callback);
        }

        private JobsTriggerRerunRequest buildBodyParams() {
            JobsTriggerRerunRequest jobsTriggerRerunRequest = new JobsTriggerRerunRequest();
            jobsTriggerRerunRequest.parameters(this.parameters);
            jobsTriggerRerunRequest.runDetails(this.runDetails);
            jobsTriggerRerunRequest.userCredentials(this.userCredentials);
            return jobsTriggerRerunRequest;
        }

        /**
         * Execute triggerRerun request
         * @return JobsTriggerRerunResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public JobsTriggerRerunResponse execute() throws ApiException {
            JobsTriggerRerunRequest jobsTriggerRerunRequest = buildBodyParams();
            ApiResponse<JobsTriggerRerunResponse> localVarResp = triggerRerunWithHttpInfo(jobsTriggerRerunRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerRerun request with HTTP info returned
         * @return ApiResponse&lt;JobsTriggerRerunResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobsTriggerRerunResponse> executeWithHttpInfo() throws ApiException {
            JobsTriggerRerunRequest jobsTriggerRerunRequest = buildBodyParams();
            return triggerRerunWithHttpInfo(jobsTriggerRerunRequest);
        }

        /**
         * Execute triggerRerun request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobsTriggerRerunResponse> _callback) throws ApiException {
            JobsTriggerRerunRequest jobsTriggerRerunRequest = buildBodyParams();
            return triggerRerunAsync(jobsTriggerRerunRequest, _callback);
        }
    }

    /**
     * Trigger Job to Re-Run
     * Querying this endpoint will initiate a new run to refresh your data warehouse based on your specified details.
     * @return TriggerRerunRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public TriggerRerunRequestBuilder triggerRerun(JobsTriggerRerunRequestRunDetails runDetails, JobsTriggerRerunRequestUserCredentials userCredentials) throws IllegalArgumentException {
        if (runDetails == null) throw new IllegalArgumentException("\"runDetails\" is required but got null");
        if (userCredentials == null) throw new IllegalArgumentException("\"userCredentials\" is required but got null");
        return new TriggerRerunRequestBuilder(runDetails, userCredentials);
    }
}
