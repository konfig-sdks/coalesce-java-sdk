/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Error;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * QueryResult
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QueryResult {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Error error;

  public static final String SERIALIZED_NAME_IS_RUNNING = "isRunning";
  @SerializedName(SERIALIZED_NAME_IS_RUNNING)
  private Boolean isRunning;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUERY_I_D = "queryID";
  @SerializedName(SERIALIZED_NAME_QUERY_I_D)
  private String queryID;

  public static final String SERIALIZED_NAME_ROWS_DELETED = "rowsDeleted";
  @SerializedName(SERIALIZED_NAME_ROWS_DELETED)
  private Integer rowsDeleted;

  public static final String SERIALIZED_NAME_ROWS_INSERTED = "rowsInserted";
  @SerializedName(SERIALIZED_NAME_ROWS_INSERTED)
  private Integer rowsInserted;

  public static final String SERIALIZED_NAME_ROWS_UPDATED = "rowsUpdated";
  @SerializedName(SERIALIZED_NAME_ROWS_UPDATED)
  private Integer rowsUpdated;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_WAREHOUSE = "warehouse";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE)
  private String warehouse;

  public QueryResult() {
  }

  public QueryResult endTime(OffsetDateTime endTime) {
    
    
    
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEndTime() {
    return endTime;
  }


  public void setEndTime(OffsetDateTime endTime) {
    
    
    
    this.endTime = endTime;
  }


  public QueryResult error(Error error) {
    
    
    
    
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Error getError() {
    return error;
  }


  public void setError(Error error) {
    
    
    
    this.error = error;
  }


  public QueryResult isRunning(Boolean isRunning) {
    
    
    
    
    this.isRunning = isRunning;
    return this;
  }

   /**
   * Get isRunning
   * @return isRunning
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsRunning() {
    return isRunning;
  }


  public void setIsRunning(Boolean isRunning) {
    
    
    
    this.isRunning = isRunning;
  }


  public QueryResult name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public QueryResult queryID(String queryID) {
    
    
    
    
    this.queryID = queryID;
    return this;
  }

   /**
   * Get queryID
   * @return queryID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQueryID() {
    return queryID;
  }


  public void setQueryID(String queryID) {
    
    
    
    this.queryID = queryID;
  }


  public QueryResult rowsDeleted(Integer rowsDeleted) {
    
    
    
    
    this.rowsDeleted = rowsDeleted;
    return this;
  }

   /**
   * Get rowsDeleted
   * @return rowsDeleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRowsDeleted() {
    return rowsDeleted;
  }


  public void setRowsDeleted(Integer rowsDeleted) {
    
    
    
    this.rowsDeleted = rowsDeleted;
  }


  public QueryResult rowsInserted(Integer rowsInserted) {
    
    
    
    
    this.rowsInserted = rowsInserted;
    return this;
  }

   /**
   * Get rowsInserted
   * @return rowsInserted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRowsInserted() {
    return rowsInserted;
  }


  public void setRowsInserted(Integer rowsInserted) {
    
    
    
    this.rowsInserted = rowsInserted;
  }


  public QueryResult rowsUpdated(Integer rowsUpdated) {
    
    
    
    
    this.rowsUpdated = rowsUpdated;
    return this;
  }

   /**
   * Get rowsUpdated
   * @return rowsUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRowsUpdated() {
    return rowsUpdated;
  }


  public void setRowsUpdated(Integer rowsUpdated) {
    
    
    
    this.rowsUpdated = rowsUpdated;
  }


  public QueryResult sql(String sql) {
    
    
    
    
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSql() {
    return sql;
  }


  public void setSql(String sql) {
    
    
    
    this.sql = sql;
  }


  public QueryResult startTime(OffsetDateTime startTime) {
    
    
    
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    
    
    
    this.startTime = startTime;
  }


  public QueryResult status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public QueryResult success(Boolean success) {
    
    
    
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    
    
    
    this.success = success;
  }


  public QueryResult warehouse(String warehouse) {
    
    
    
    
    this.warehouse = warehouse;
    return this;
  }

   /**
   * Get warehouse
   * @return warehouse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getWarehouse() {
    return warehouse;
  }


  public void setWarehouse(String warehouse) {
    
    
    
    this.warehouse = warehouse;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QueryResult instance itself
   */
  public QueryResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResult queryResult = (QueryResult) o;
    return Objects.equals(this.endTime, queryResult.endTime) &&
        Objects.equals(this.error, queryResult.error) &&
        Objects.equals(this.isRunning, queryResult.isRunning) &&
        Objects.equals(this.name, queryResult.name) &&
        Objects.equals(this.queryID, queryResult.queryID) &&
        Objects.equals(this.rowsDeleted, queryResult.rowsDeleted) &&
        Objects.equals(this.rowsInserted, queryResult.rowsInserted) &&
        Objects.equals(this.rowsUpdated, queryResult.rowsUpdated) &&
        Objects.equals(this.sql, queryResult.sql) &&
        Objects.equals(this.startTime, queryResult.startTime) &&
        Objects.equals(this.status, queryResult.status) &&
        Objects.equals(this.success, queryResult.success) &&
        Objects.equals(this.warehouse, queryResult.warehouse)&&
        Objects.equals(this.additionalProperties, queryResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, error, isRunning, name, queryID, rowsDeleted, rowsInserted, rowsUpdated, sql, startTime, status, success, warehouse, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResult {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    isRunning: ").append(toIndentedString(isRunning)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    queryID: ").append(toIndentedString(queryID)).append("\n");
    sb.append("    rowsDeleted: ").append(toIndentedString(rowsDeleted)).append("\n");
    sb.append("    rowsInserted: ").append(toIndentedString(rowsInserted)).append("\n");
    sb.append("    rowsUpdated: ").append(toIndentedString(rowsUpdated)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("isRunning");
    openapiFields.add("name");
    openapiFields.add("queryID");
    openapiFields.add("rowsDeleted");
    openapiFields.add("rowsInserted");
    openapiFields.add("rowsUpdated");
    openapiFields.add("sql");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("success");
    openapiFields.add("warehouse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isRunning");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sql");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("success");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QueryResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QueryResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResult is not found in the empty JSON string", QueryResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Error.validateJsonObject(jsonObj.getAsJsonObject("error"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("queryID") != null && !jsonObj.get("queryID").isJsonNull()) && !jsonObj.get("queryID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryID").toString()));
      }
      if (!jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("warehouse") != null && !jsonObj.get("warehouse").isJsonNull()) && !jsonObj.get("warehouse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResult.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResult>() {
           @Override
           public void write(JsonWriter out, QueryResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QueryResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryResult
  * @throws IOException if the JSON string is invalid with respect to QueryResult
  */
  public static QueryResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResult.class);
  }

 /**
  * Convert an instance of QueryResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

