/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * userCredentials contains connection credentials for connecting to Snowflake. Currently only basic auth (username/password) may be specified. If however, an OAuth connection has been established for the given environment specified in runDetails.environmentID, you may ommit userCredentials. In that case, Coalesce will use the OAuth connection to connect with Snowflake.
 */
@ApiModel(description = "userCredentials contains connection credentials for connecting to Snowflake. Currently only basic auth (username/password) may be specified. If however, an OAuth connection has been established for the given environment specified in runDetails.environmentID, you may ommit userCredentials. In that case, Coalesce will use the OAuth connection to connect with Snowflake.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobsTriggerRerunRequestUserCredentials {
  public static final String SERIALIZED_NAME_SNOWFLAKE_USERNAME = "snowflakeUsername";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_USERNAME)
  private String snowflakeUsername;

  public static final String SERIALIZED_NAME_SNOWFLAKE_PASSWORD = "snowflakePassword";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_PASSWORD)
  private String snowflakePassword;

  public static final String SERIALIZED_NAME_SNOWFLAKE_KEY_PAIR_KEY = "snowflakeKeyPairKey";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_KEY_PAIR_KEY)
  private String snowflakeKeyPairKey;

  public static final String SERIALIZED_NAME_SNOWFLAKE_KEY_PAIR_PASS = "snowflakeKeyPairPass";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_KEY_PAIR_PASS)
  private String snowflakeKeyPairPass;

  public static final String SERIALIZED_NAME_SNOWFLAKE_WAREHOUSE = "snowflakeWarehouse";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_WAREHOUSE)
  private String snowflakeWarehouse;

  public static final String SERIALIZED_NAME_SNOWFLAKE_ROLE = "snowflakeRole";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_ROLE)
  private String snowflakeRole;

  public static final String SERIALIZED_NAME_SNOWFLAKE_AUTH_TYPE = "snowflakeAuthType";
  @SerializedName(SERIALIZED_NAME_SNOWFLAKE_AUTH_TYPE)
  private String snowflakeAuthType = "Basic";

  public JobsTriggerRerunRequestUserCredentials() {
  }

  public JobsTriggerRerunRequestUserCredentials snowflakeUsername(String snowflakeUsername) {
    
    
    
    
    this.snowflakeUsername = snowflakeUsername;
    return this;
  }

   /**
   * Snowflake Account Username. Required when snowflakeAuthType is Basic
   * @return snowflakeUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Snowflake Account Username. Required when snowflakeAuthType is Basic")

  public String getSnowflakeUsername() {
    return snowflakeUsername;
  }


  public void setSnowflakeUsername(String snowflakeUsername) {
    
    
    
    this.snowflakeUsername = snowflakeUsername;
  }


  public JobsTriggerRerunRequestUserCredentials snowflakePassword(String snowflakePassword) {
    
    
    
    
    this.snowflakePassword = snowflakePassword;
    return this;
  }

   /**
   * Snowflake Account password. Required when snowflakeAuthType is Basic
   * @return snowflakePassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Snowflake Account password. Required when snowflakeAuthType is Basic")

  public String getSnowflakePassword() {
    return snowflakePassword;
  }


  public void setSnowflakePassword(String snowflakePassword) {
    
    
    
    this.snowflakePassword = snowflakePassword;
  }


  public JobsTriggerRerunRequestUserCredentials snowflakeKeyPairKey(String snowflakeKeyPairKey) {
    
    
    
    
    this.snowflakeKeyPairKey = snowflakeKeyPairKey;
    return this;
  }

   /**
   * The PEM-encoded private key to use when authenticating to Snowflake. Required when using the KeyPair authentication type. Newlines must be encoded as \&quot;\\n\&quot; within the request.
   * @return snowflakeKeyPairKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The PEM-encoded private key to use when authenticating to Snowflake. Required when using the KeyPair authentication type. Newlines must be encoded as \"\\n\" within the request.")

  public String getSnowflakeKeyPairKey() {
    return snowflakeKeyPairKey;
  }


  public void setSnowflakeKeyPairKey(String snowflakeKeyPairKey) {
    
    
    
    this.snowflakeKeyPairKey = snowflakeKeyPairKey;
  }


  public JobsTriggerRerunRequestUserCredentials snowflakeKeyPairPass(String snowflakeKeyPairPass) {
    
    
    
    
    this.snowflakeKeyPairPass = snowflakeKeyPairPass;
    return this;
  }

   /**
   * The password to use to decrypt the private key. This is only applicable when the authentication type is KeyPair and the private key is encrypted.
   * @return snowflakeKeyPairPass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password to use to decrypt the private key. This is only applicable when the authentication type is KeyPair and the private key is encrypted.")

  public String getSnowflakeKeyPairPass() {
    return snowflakeKeyPairPass;
  }


  public void setSnowflakeKeyPairPass(String snowflakeKeyPairPass) {
    
    
    
    this.snowflakeKeyPairPass = snowflakeKeyPairPass;
  }


  public JobsTriggerRerunRequestUserCredentials snowflakeWarehouse(String snowflakeWarehouse) {
    
    
    
    
    this.snowflakeWarehouse = snowflakeWarehouse;
    return this;
  }

   /**
   * Snowflake compute warehouse
   * @return snowflakeWarehouse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Snowflake compute warehouse")

  public String getSnowflakeWarehouse() {
    return snowflakeWarehouse;
  }


  public void setSnowflakeWarehouse(String snowflakeWarehouse) {
    
    
    
    this.snowflakeWarehouse = snowflakeWarehouse;
  }


  public JobsTriggerRerunRequestUserCredentials snowflakeRole(String snowflakeRole) {
    
    
    
    
    this.snowflakeRole = snowflakeRole;
    return this;
  }

   /**
   * Snowflake user role
   * @return snowflakeRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Snowflake user role")

  public String getSnowflakeRole() {
    return snowflakeRole;
  }


  public void setSnowflakeRole(String snowflakeRole) {
    
    
    
    this.snowflakeRole = snowflakeRole;
  }


  public JobsTriggerRerunRequestUserCredentials snowflakeAuthType(String snowflakeAuthType) {
    
    
    
    
    this.snowflakeAuthType = snowflakeAuthType;
    return this;
  }

   /**
   * Options: Basic | KeyPair | OAuth
   * @return snowflakeAuthType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Basic", value = "Options: Basic | KeyPair | OAuth")

  public String getSnowflakeAuthType() {
    return snowflakeAuthType;
  }


  public void setSnowflakeAuthType(String snowflakeAuthType) {
    
    
    
    this.snowflakeAuthType = snowflakeAuthType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobsTriggerRerunRequestUserCredentials instance itself
   */
  public JobsTriggerRerunRequestUserCredentials putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsTriggerRerunRequestUserCredentials jobsTriggerRerunRequestUserCredentials = (JobsTriggerRerunRequestUserCredentials) o;
    return Objects.equals(this.snowflakeUsername, jobsTriggerRerunRequestUserCredentials.snowflakeUsername) &&
        Objects.equals(this.snowflakePassword, jobsTriggerRerunRequestUserCredentials.snowflakePassword) &&
        Objects.equals(this.snowflakeKeyPairKey, jobsTriggerRerunRequestUserCredentials.snowflakeKeyPairKey) &&
        Objects.equals(this.snowflakeKeyPairPass, jobsTriggerRerunRequestUserCredentials.snowflakeKeyPairPass) &&
        Objects.equals(this.snowflakeWarehouse, jobsTriggerRerunRequestUserCredentials.snowflakeWarehouse) &&
        Objects.equals(this.snowflakeRole, jobsTriggerRerunRequestUserCredentials.snowflakeRole) &&
        Objects.equals(this.snowflakeAuthType, jobsTriggerRerunRequestUserCredentials.snowflakeAuthType)&&
        Objects.equals(this.additionalProperties, jobsTriggerRerunRequestUserCredentials.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snowflakeUsername, snowflakePassword, snowflakeKeyPairKey, snowflakeKeyPairPass, snowflakeWarehouse, snowflakeRole, snowflakeAuthType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsTriggerRerunRequestUserCredentials {\n");
    sb.append("    snowflakeUsername: ").append(toIndentedString(snowflakeUsername)).append("\n");
    sb.append("    snowflakePassword: ").append(toIndentedString(snowflakePassword)).append("\n");
    sb.append("    snowflakeKeyPairKey: ").append(toIndentedString(snowflakeKeyPairKey)).append("\n");
    sb.append("    snowflakeKeyPairPass: ").append(toIndentedString(snowflakeKeyPairPass)).append("\n");
    sb.append("    snowflakeWarehouse: ").append(toIndentedString(snowflakeWarehouse)).append("\n");
    sb.append("    snowflakeRole: ").append(toIndentedString(snowflakeRole)).append("\n");
    sb.append("    snowflakeAuthType: ").append(toIndentedString(snowflakeAuthType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("snowflakeUsername");
    openapiFields.add("snowflakePassword");
    openapiFields.add("snowflakeKeyPairKey");
    openapiFields.add("snowflakeKeyPairPass");
    openapiFields.add("snowflakeWarehouse");
    openapiFields.add("snowflakeRole");
    openapiFields.add("snowflakeAuthType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobsTriggerRerunRequestUserCredentials
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobsTriggerRerunRequestUserCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsTriggerRerunRequestUserCredentials is not found in the empty JSON string", JobsTriggerRerunRequestUserCredentials.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("snowflakeUsername") != null && !jsonObj.get("snowflakeUsername").isJsonNull()) && !jsonObj.get("snowflakeUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakeUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakeUsername").toString()));
      }
      if ((jsonObj.get("snowflakePassword") != null && !jsonObj.get("snowflakePassword").isJsonNull()) && !jsonObj.get("snowflakePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakePassword").toString()));
      }
      if ((jsonObj.get("snowflakeKeyPairKey") != null && !jsonObj.get("snowflakeKeyPairKey").isJsonNull()) && !jsonObj.get("snowflakeKeyPairKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakeKeyPairKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakeKeyPairKey").toString()));
      }
      if ((jsonObj.get("snowflakeKeyPairPass") != null && !jsonObj.get("snowflakeKeyPairPass").isJsonNull()) && !jsonObj.get("snowflakeKeyPairPass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakeKeyPairPass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakeKeyPairPass").toString()));
      }
      if ((jsonObj.get("snowflakeWarehouse") != null && !jsonObj.get("snowflakeWarehouse").isJsonNull()) && !jsonObj.get("snowflakeWarehouse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakeWarehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakeWarehouse").toString()));
      }
      if ((jsonObj.get("snowflakeRole") != null && !jsonObj.get("snowflakeRole").isJsonNull()) && !jsonObj.get("snowflakeRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakeRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakeRole").toString()));
      }
      if ((jsonObj.get("snowflakeAuthType") != null && !jsonObj.get("snowflakeAuthType").isJsonNull()) && !jsonObj.get("snowflakeAuthType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snowflakeAuthType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snowflakeAuthType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsTriggerRerunRequestUserCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsTriggerRerunRequestUserCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsTriggerRerunRequestUserCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsTriggerRerunRequestUserCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsTriggerRerunRequestUserCredentials>() {
           @Override
           public void write(JsonWriter out, JobsTriggerRerunRequestUserCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsTriggerRerunRequestUserCredentials read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobsTriggerRerunRequestUserCredentials instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobsTriggerRerunRequestUserCredentials given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobsTriggerRerunRequestUserCredentials
  * @throws IOException if the JSON string is invalid with respect to JobsTriggerRerunRequestUserCredentials
  */
  public static JobsTriggerRerunRequestUserCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsTriggerRerunRequestUserCredentials.class);
  }

 /**
  * Convert an instance of JobsTriggerRerunRequestUserCredentials to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

