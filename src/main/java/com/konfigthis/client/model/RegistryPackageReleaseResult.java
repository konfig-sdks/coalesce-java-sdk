/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RegistryPackageReleaseResultCreatedAt;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A single release of a package in the registry.
 */
@ApiModel(description = "A single release of a package in the registry.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RegistryPackageReleaseResult {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private RegistryPackageReleaseResultCreatedAt createdAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private RegistryPackageReleaseResultCreatedAt updatedAt;

  public static final String SERIALIZED_NAME_CHANGE_LOG = "changeLog";
  @SerializedName(SERIALIZED_NAME_CHANGE_LOG)
  private String changeLog;

  public static final String SERIALIZED_NAME_PACKAGE_I_D = "packageID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_I_D)
  private String packageID;

  public static final String SERIALIZED_NAME_RELEASE_I_D = "releaseID";
  @SerializedName(SERIALIZED_NAME_RELEASE_I_D)
  private String releaseID;

  public static final String SERIALIZED_NAME_STORAGE_PATH = "storagePath";
  @SerializedName(SERIALIZED_NAME_STORAGE_PATH)
  private String storagePath;

  public RegistryPackageReleaseResult() {
  }

  public RegistryPackageReleaseResult version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public RegistryPackageReleaseResult createdBy(String createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public RegistryPackageReleaseResult createdAt(RegistryPackageReleaseResultCreatedAt createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RegistryPackageReleaseResultCreatedAt getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(RegistryPackageReleaseResultCreatedAt createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public RegistryPackageReleaseResult updatedBy(String updatedBy) {
    
    
    
    
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdatedBy() {
    return updatedBy;
  }


  public void setUpdatedBy(String updatedBy) {
    
    
    
    this.updatedBy = updatedBy;
  }


  public RegistryPackageReleaseResult updatedAt(RegistryPackageReleaseResultCreatedAt updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RegistryPackageReleaseResultCreatedAt getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(RegistryPackageReleaseResultCreatedAt updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public RegistryPackageReleaseResult changeLog(String changeLog) {
    
    
    
    
    this.changeLog = changeLog;
    return this;
  }

   /**
   * Get changeLog
   * @return changeLog
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getChangeLog() {
    return changeLog;
  }


  public void setChangeLog(String changeLog) {
    
    
    
    this.changeLog = changeLog;
  }


  public RegistryPackageReleaseResult packageID(String packageID) {
    
    
    
    
    this.packageID = packageID;
    return this;
  }

   /**
   * Get packageID
   * @return packageID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPackageID() {
    return packageID;
  }


  public void setPackageID(String packageID) {
    
    
    
    this.packageID = packageID;
  }


  public RegistryPackageReleaseResult releaseID(String releaseID) {
    
    
    
    
    this.releaseID = releaseID;
    return this;
  }

   /**
   * Get releaseID
   * @return releaseID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getReleaseID() {
    return releaseID;
  }


  public void setReleaseID(String releaseID) {
    
    
    
    this.releaseID = releaseID;
  }


  public RegistryPackageReleaseResult storagePath(String storagePath) {
    
    
    
    
    this.storagePath = storagePath;
    return this;
  }

   /**
   * Get storagePath
   * @return storagePath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStoragePath() {
    return storagePath;
  }


  public void setStoragePath(String storagePath) {
    
    
    
    this.storagePath = storagePath;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RegistryPackageReleaseResult instance itself
   */
  public RegistryPackageReleaseResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryPackageReleaseResult registryPackageReleaseResult = (RegistryPackageReleaseResult) o;
    return Objects.equals(this.version, registryPackageReleaseResult.version) &&
        Objects.equals(this.createdBy, registryPackageReleaseResult.createdBy) &&
        Objects.equals(this.createdAt, registryPackageReleaseResult.createdAt) &&
        Objects.equals(this.updatedBy, registryPackageReleaseResult.updatedBy) &&
        Objects.equals(this.updatedAt, registryPackageReleaseResult.updatedAt) &&
        Objects.equals(this.changeLog, registryPackageReleaseResult.changeLog) &&
        Objects.equals(this.packageID, registryPackageReleaseResult.packageID) &&
        Objects.equals(this.releaseID, registryPackageReleaseResult.releaseID) &&
        Objects.equals(this.storagePath, registryPackageReleaseResult.storagePath)&&
        Objects.equals(this.additionalProperties, registryPackageReleaseResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, createdBy, createdAt, updatedBy, updatedAt, changeLog, packageID, releaseID, storagePath, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryPackageReleaseResult {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    changeLog: ").append(toIndentedString(changeLog)).append("\n");
    sb.append("    packageID: ").append(toIndentedString(packageID)).append("\n");
    sb.append("    releaseID: ").append(toIndentedString(releaseID)).append("\n");
    sb.append("    storagePath: ").append(toIndentedString(storagePath)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("createdBy");
    openapiFields.add("createdAt");
    openapiFields.add("updatedBy");
    openapiFields.add("updatedAt");
    openapiFields.add("changeLog");
    openapiFields.add("packageID");
    openapiFields.add("releaseID");
    openapiFields.add("storagePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("changeLog");
    openapiRequiredFields.add("packageID");
    openapiRequiredFields.add("releaseID");
    openapiRequiredFields.add("storagePath");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegistryPackageReleaseResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RegistryPackageReleaseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryPackageReleaseResult is not found in the empty JSON string", RegistryPackageReleaseResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistryPackageReleaseResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      // validate the required field `createdAt`
      RegistryPackageReleaseResultCreatedAt.validateJsonObject(jsonObj.getAsJsonObject("createdAt"));
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      // validate the optional field `updatedAt`
      if (jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) {
        RegistryPackageReleaseResultCreatedAt.validateJsonObject(jsonObj.getAsJsonObject("updatedAt"));
      }
      if (!jsonObj.get("changeLog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeLog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeLog").toString()));
      }
      if (!jsonObj.get("packageID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageID").toString()));
      }
      if (!jsonObj.get("releaseID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseID").toString()));
      }
      if (!jsonObj.get("storagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistryPackageReleaseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistryPackageReleaseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistryPackageReleaseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistryPackageReleaseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistryPackageReleaseResult>() {
           @Override
           public void write(JsonWriter out, RegistryPackageReleaseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistryPackageReleaseResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RegistryPackageReleaseResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegistryPackageReleaseResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegistryPackageReleaseResult
  * @throws IOException if the JSON string is invalid with respect to RegistryPackageReleaseResult
  */
  public static RegistryPackageReleaseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistryPackageReleaseResult.class);
  }

 /**
  * Convert an instance of RegistryPackageReleaseResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

