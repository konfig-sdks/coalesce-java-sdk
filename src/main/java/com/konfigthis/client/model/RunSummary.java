/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DRRunDetails;
import com.konfigthis.client.model.SnowflakeUserCredentials;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RunSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RunSummary {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_RE_RUN_I_D = "reRunID";
  @SerializedName(SERIALIZED_NAME_RE_RUN_I_D)
  private String reRunID;

  public static final String SERIALIZED_NAME_RUN_START_TIME = "runStartTime";
  @SerializedName(SERIALIZED_NAME_RUN_START_TIME)
  private OffsetDateTime runStartTime;

  public static final String SERIALIZED_NAME_RUN_END_TIME = "runEndTime";
  @SerializedName(SERIALIZED_NAME_RUN_END_TIME)
  private OffsetDateTime runEndTime;

  /**
   * Gets or Sets runType
   */
  @JsonAdapter(RunTypeEnum.Adapter.class)
 public enum RunTypeEnum {
    DEPLOY("deploy"),
    
    REFRESH("refresh");

    private String value;

    RunTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunTypeEnum fromValue(String value) {
      for (RunTypeEnum b : RunTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RUN_TYPE = "runType";
  @SerializedName(SERIALIZED_NAME_RUN_TYPE)
  private RunTypeEnum runType;

  /**
   * Gets or Sets runStatus
   */
  @JsonAdapter(RunStatusEnum.Adapter.class)
 public enum RunStatusEnum {
    CANCELED("canceled"),
    
    COMPLETED("completed"),
    
    FAILED("failed"),
    
    RUNNING("running"),
    
    WAITINGTORUN("waitingToRun");

    private String value;

    RunStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunStatusEnum fromValue(String value) {
      for (RunStatusEnum b : RunStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RUN_STATUS = "runStatus";
  @SerializedName(SERIALIZED_NAME_RUN_STATUS)
  private RunStatusEnum runStatus;

  public static final String SERIALIZED_NAME_ENVIRONMENT_I_D = "environmentID";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_I_D)
  private String environmentID;

  public static final String SERIALIZED_NAME_RUN_FAILURE_REASON = "runFailureReason";
  @SerializedName(SERIALIZED_NAME_RUN_FAILURE_REASON)
  private String runFailureReason;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_RUN_DETAILS = "runDetails";
  @SerializedName(SERIALIZED_NAME_RUN_DETAILS)
  private DRRunDetails runDetails;

  public static final String SERIALIZED_NAME_RUN_HISTORY = "runHistory";
  @SerializedName(SERIALIZED_NAME_RUN_HISTORY)
  private List<Integer> runHistory = null;

  public static final String SERIALIZED_NAME_RUN_TIME_PARAMETERS = "runTimeParameters";
  @SerializedName(SERIALIZED_NAME_RUN_TIME_PARAMETERS)
  private Map<String, Object> runTimeParameters = null;

  public static final String SERIALIZED_NAME_USER_CREDENTIALS = "userCredentials";
  @SerializedName(SERIALIZED_NAME_USER_CREDENTIALS)
  private SnowflakeUserCredentials userCredentials;

  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private String userID;

  public RunSummary() {
  }

  public RunSummary id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The run ID.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The run ID.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public RunSummary reRunID(String reRunID) {
    
    
    
    
    this.reRunID = reRunID;
    return this;
  }

   /**
   * If this is a re-run, the ID of the original operation.
   * @return reRunID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this is a re-run, the ID of the original operation.")

  public String getReRunID() {
    return reRunID;
  }


  public void setReRunID(String reRunID) {
    
    
    
    this.reRunID = reRunID;
  }


  public RunSummary runStartTime(OffsetDateTime runStartTime) {
    
    
    
    
    this.runStartTime = runStartTime;
    return this;
  }

   /**
   * The datetime at which the run started.
   * @return runStartTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The datetime at which the run started.")

  public OffsetDateTime getRunStartTime() {
    return runStartTime;
  }


  public void setRunStartTime(OffsetDateTime runStartTime) {
    
    
    
    this.runStartTime = runStartTime;
  }


  public RunSummary runEndTime(OffsetDateTime runEndTime) {
    
    
    
    
    this.runEndTime = runEndTime;
    return this;
  }

   /**
   * The datetime at which the run ended.
   * @return runEndTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The datetime at which the run ended.")

  public OffsetDateTime getRunEndTime() {
    return runEndTime;
  }


  public void setRunEndTime(OffsetDateTime runEndTime) {
    
    
    
    this.runEndTime = runEndTime;
  }


  public RunSummary runType(RunTypeEnum runType) {
    
    
    
    
    this.runType = runType;
    return this;
  }

   /**
   * Get runType
   * @return runType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RunTypeEnum getRunType() {
    return runType;
  }


  public void setRunType(RunTypeEnum runType) {
    
    
    
    this.runType = runType;
  }


  public RunSummary runStatus(RunStatusEnum runStatus) {
    
    
    
    
    this.runStatus = runStatus;
    return this;
  }

   /**
   * Get runStatus
   * @return runStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RunStatusEnum getRunStatus() {
    return runStatus;
  }


  public void setRunStatus(RunStatusEnum runStatus) {
    
    
    
    this.runStatus = runStatus;
  }


  public RunSummary environmentID(String environmentID) {
    
    
    
    
    this.environmentID = environmentID;
    return this;
  }

   /**
   * The environment in which the run operation was applied.
   * @return environmentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The environment in which the run operation was applied.")

  public String getEnvironmentID() {
    return environmentID;
  }


  public void setEnvironmentID(String environmentID) {
    
    
    
    this.environmentID = environmentID;
  }


  public RunSummary runFailureReason(String runFailureReason) {
    
    
    
    
    this.runFailureReason = runFailureReason;
    return this;
  }

   /**
   * Information about the cause of a run failure.
   * @return runFailureReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information about the cause of a run failure.")

  public String getRunFailureReason() {
    return runFailureReason;
  }


  public void setRunFailureReason(String runFailureReason) {
    
    
    
    this.runFailureReason = runFailureReason;
  }


  public RunSummary version(Integer version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    
    
    
    this.version = version;
  }


  public RunSummary runDetails(DRRunDetails runDetails) {
    
    
    
    
    this.runDetails = runDetails;
    return this;
  }

   /**
   * Get runDetails
   * @return runDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DRRunDetails getRunDetails() {
    return runDetails;
  }


  public void setRunDetails(DRRunDetails runDetails) {
    
    
    
    this.runDetails = runDetails;
  }


  public RunSummary runHistory(List<Integer> runHistory) {
    
    
    
    
    this.runHistory = runHistory;
    return this;
  }

  public RunSummary addRunHistoryItem(Integer runHistoryItem) {
    if (this.runHistory == null) {
      this.runHistory = new ArrayList<>();
    }
    this.runHistory.add(runHistoryItem);
    return this;
  }

   /**
   * Get runHistory
   * @return runHistory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getRunHistory() {
    return runHistory;
  }


  public void setRunHistory(List<Integer> runHistory) {
    
    
    
    this.runHistory = runHistory;
  }


  public RunSummary runTimeParameters(Map<String, Object> runTimeParameters) {
    
    
    
    
    this.runTimeParameters = runTimeParameters;
    return this;
  }

  public RunSummary putRunTimeParametersItem(String key, Object runTimeParametersItem) {
    if (this.runTimeParameters == null) {
      this.runTimeParameters = new HashMap<>();
    }
    this.runTimeParameters.put(key, runTimeParametersItem);
    return this;
  }

   /**
   * Get runTimeParameters
   * @return runTimeParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getRunTimeParameters() {
    return runTimeParameters;
  }


  public void setRunTimeParameters(Map<String, Object> runTimeParameters) {
    
    
    
    this.runTimeParameters = runTimeParameters;
  }


  public RunSummary userCredentials(SnowflakeUserCredentials userCredentials) {
    
    
    
    
    this.userCredentials = userCredentials;
    return this;
  }

   /**
   * Get userCredentials
   * @return userCredentials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SnowflakeUserCredentials getUserCredentials() {
    return userCredentials;
  }


  public void setUserCredentials(SnowflakeUserCredentials userCredentials) {
    
    
    
    this.userCredentials = userCredentials;
  }


  public RunSummary userID(String userID) {
    
    
    
    
    this.userID = userID;
    return this;
  }

   /**
   * Get userID
   * @return userID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUserID() {
    return userID;
  }


  public void setUserID(String userID) {
    
    
    
    this.userID = userID;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RunSummary instance itself
   */
  public RunSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunSummary runSummary = (RunSummary) o;
    return Objects.equals(this.id, runSummary.id) &&
        Objects.equals(this.reRunID, runSummary.reRunID) &&
        Objects.equals(this.runStartTime, runSummary.runStartTime) &&
        Objects.equals(this.runEndTime, runSummary.runEndTime) &&
        Objects.equals(this.runType, runSummary.runType) &&
        Objects.equals(this.runStatus, runSummary.runStatus) &&
        Objects.equals(this.environmentID, runSummary.environmentID) &&
        Objects.equals(this.runFailureReason, runSummary.runFailureReason) &&
        Objects.equals(this.version, runSummary.version) &&
        Objects.equals(this.runDetails, runSummary.runDetails) &&
        Objects.equals(this.runHistory, runSummary.runHistory) &&
        Objects.equals(this.runTimeParameters, runSummary.runTimeParameters) &&
        Objects.equals(this.userCredentials, runSummary.userCredentials) &&
        Objects.equals(this.userID, runSummary.userID)&&
        Objects.equals(this.additionalProperties, runSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, reRunID, runStartTime, runEndTime, runType, runStatus, environmentID, runFailureReason, version, runDetails, runHistory, runTimeParameters, userCredentials, userID, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    reRunID: ").append(toIndentedString(reRunID)).append("\n");
    sb.append("    runStartTime: ").append(toIndentedString(runStartTime)).append("\n");
    sb.append("    runEndTime: ").append(toIndentedString(runEndTime)).append("\n");
    sb.append("    runType: ").append(toIndentedString(runType)).append("\n");
    sb.append("    runStatus: ").append(toIndentedString(runStatus)).append("\n");
    sb.append("    environmentID: ").append(toIndentedString(environmentID)).append("\n");
    sb.append("    runFailureReason: ").append(toIndentedString(runFailureReason)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    runDetails: ").append(toIndentedString(runDetails)).append("\n");
    sb.append("    runHistory: ").append(toIndentedString(runHistory)).append("\n");
    sb.append("    runTimeParameters: ").append(toIndentedString(runTimeParameters)).append("\n");
    sb.append("    userCredentials: ").append(toIndentedString(userCredentials)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("reRunID");
    openapiFields.add("runStartTime");
    openapiFields.add("runEndTime");
    openapiFields.add("runType");
    openapiFields.add("runStatus");
    openapiFields.add("environmentID");
    openapiFields.add("runFailureReason");
    openapiFields.add("version");
    openapiFields.add("runDetails");
    openapiFields.add("runHistory");
    openapiFields.add("runTimeParameters");
    openapiFields.add("userCredentials");
    openapiFields.add("userID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("runType");
    openapiRequiredFields.add("runStatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RunSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RunSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunSummary is not found in the empty JSON string", RunSummary.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RunSummary.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("reRunID") != null && !jsonObj.get("reRunID").isJsonNull()) && !jsonObj.get("reRunID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reRunID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reRunID").toString()));
      }
      if (!jsonObj.get("runType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runType").toString()));
      }
      if (!jsonObj.get("runStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStatus").toString()));
      }
      if ((jsonObj.get("environmentID") != null && !jsonObj.get("environmentID").isJsonNull()) && !jsonObj.get("environmentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentID").toString()));
      }
      if ((jsonObj.get("runFailureReason") != null && !jsonObj.get("runFailureReason").isJsonNull()) && !jsonObj.get("runFailureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runFailureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runFailureReason").toString()));
      }
      // validate the optional field `runDetails`
      if (jsonObj.get("runDetails") != null && !jsonObj.get("runDetails").isJsonNull()) {
        DRRunDetails.validateJsonObject(jsonObj.getAsJsonObject("runDetails"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("runHistory") != null && !jsonObj.get("runHistory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `runHistory` to be an array in the JSON string but got `%s`", jsonObj.get("runHistory").toString()));
      }
      // validate the optional field `userCredentials`
      if (jsonObj.get("userCredentials") != null && !jsonObj.get("userCredentials").isJsonNull()) {
        SnowflakeUserCredentials.validateJsonObject(jsonObj.getAsJsonObject("userCredentials"));
      }
      if ((jsonObj.get("userID") != null && !jsonObj.get("userID").isJsonNull()) && !jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RunSummary>() {
           @Override
           public void write(JsonWriter out, RunSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RunSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RunSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunSummary
  * @throws IOException if the JSON string is invalid with respect to RunSummary
  */
  public static RunSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunSummary.class);
  }

 /**
  * Convert an instance of RunSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

