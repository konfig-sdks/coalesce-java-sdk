/*
 * Coalesce API
 * REST API for performing operations with the Coalesce backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomSQL;
import com.konfigthis.client.model.JoinCondition;
import com.konfigthis.client.model.RefLink;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SourceMap
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SourceMap {
  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private Map<String, String> aliases = null;

  public static final String SERIALIZED_NAME_CUSTOM_S_Q_L = "customSQL";
  @SerializedName(SERIALIZED_NAME_CUSTOM_S_Q_L)
  private CustomSQL customSQL;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<RefLink> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOIN = "join";
  @SerializedName(SERIALIZED_NAME_JOIN)
  private JoinCondition join;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NO_LINK_REFS = "noLinkRefs";
  @SerializedName(SERIALIZED_NAME_NO_LINK_REFS)
  private List<RefLink> noLinkRefs = new ArrayList<>();

  public SourceMap() {
  }

  public SourceMap aliases(Map<String, String> aliases) {
    
    
    
    
    this.aliases = aliases;
    return this;
  }

  public SourceMap putAliasesItem(String key, String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new HashMap<>();
    }
    this.aliases.put(key, aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getAliases() {
    return aliases;
  }


  public void setAliases(Map<String, String> aliases) {
    
    
    
    this.aliases = aliases;
  }


  public SourceMap customSQL(CustomSQL customSQL) {
    
    
    
    
    this.customSQL = customSQL;
    return this;
  }

   /**
   * Get customSQL
   * @return customSQL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomSQL getCustomSQL() {
    return customSQL;
  }


  public void setCustomSQL(CustomSQL customSQL) {
    
    
    
    this.customSQL = customSQL;
  }


  public SourceMap dependencies(List<RefLink> dependencies) {
    
    
    
    
    this.dependencies = dependencies;
    return this;
  }

  public SourceMap addDependenciesItem(RefLink dependenciesItem) {
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<RefLink> getDependencies() {
    return dependencies;
  }


  public void setDependencies(List<RefLink> dependencies) {
    
    
    
    this.dependencies = dependencies;
  }


  public SourceMap join(JoinCondition join) {
    
    
    
    
    this.join = join;
    return this;
  }

   /**
   * Get join
   * @return join
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public JoinCondition getJoin() {
    return join;
  }


  public void setJoin(JoinCondition join) {
    
    
    
    this.join = join;
  }


  public SourceMap name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public SourceMap noLinkRefs(List<RefLink> noLinkRefs) {
    
    
    
    
    this.noLinkRefs = noLinkRefs;
    return this;
  }

  public SourceMap addNoLinkRefsItem(RefLink noLinkRefsItem) {
    this.noLinkRefs.add(noLinkRefsItem);
    return this;
  }

   /**
   * Get noLinkRefs
   * @return noLinkRefs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<RefLink> getNoLinkRefs() {
    return noLinkRefs;
  }


  public void setNoLinkRefs(List<RefLink> noLinkRefs) {
    
    
    
    this.noLinkRefs = noLinkRefs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SourceMap instance itself
   */
  public SourceMap putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceMap sourceMap = (SourceMap) o;
    return Objects.equals(this.aliases, sourceMap.aliases) &&
        Objects.equals(this.customSQL, sourceMap.customSQL) &&
        Objects.equals(this.dependencies, sourceMap.dependencies) &&
        Objects.equals(this.join, sourceMap.join) &&
        Objects.equals(this.name, sourceMap.name) &&
        Objects.equals(this.noLinkRefs, sourceMap.noLinkRefs)&&
        Objects.equals(this.additionalProperties, sourceMap.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, customSQL, dependencies, join, name, noLinkRefs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceMap {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    customSQL: ").append(toIndentedString(customSQL)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    join: ").append(toIndentedString(join)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    noLinkRefs: ").append(toIndentedString(noLinkRefs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliases");
    openapiFields.add("customSQL");
    openapiFields.add("dependencies");
    openapiFields.add("join");
    openapiFields.add("name");
    openapiFields.add("noLinkRefs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dependencies");
    openapiRequiredFields.add("join");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("noLinkRefs");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SourceMap
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SourceMap.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceMap is not found in the empty JSON string", SourceMap.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceMap.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `customSQL`
      if (jsonObj.get("customSQL") != null && !jsonObj.get("customSQL").isJsonNull()) {
        CustomSQL.validateJsonObject(jsonObj.getAsJsonObject("customSQL"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("dependencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }

      JsonArray jsonArraydependencies = jsonObj.getAsJsonArray("dependencies");
      // validate the required field `dependencies` (array)
      for (int i = 0; i < jsonArraydependencies.size(); i++) {
        RefLink.validateJsonObject(jsonArraydependencies.get(i).getAsJsonObject());
      };
      // validate the required field `join`
      JoinCondition.validateJsonObject(jsonObj.getAsJsonObject("join"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("noLinkRefs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noLinkRefs` to be an array in the JSON string but got `%s`", jsonObj.get("noLinkRefs").toString()));
      }

      JsonArray jsonArraynoLinkRefs = jsonObj.getAsJsonArray("noLinkRefs");
      // validate the required field `noLinkRefs` (array)
      for (int i = 0; i < jsonArraynoLinkRefs.size(); i++) {
        RefLink.validateJsonObject(jsonArraynoLinkRefs.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceMap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceMap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceMap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceMap.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceMap>() {
           @Override
           public void write(JsonWriter out, SourceMap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceMap read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SourceMap instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourceMap given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourceMap
  * @throws IOException if the JSON string is invalid with respect to SourceMap
  */
  public static SourceMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceMap.class);
  }

 /**
  * Convert an instance of SourceMap to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

